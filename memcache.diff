Index: swift/common/utils.py
===================================================================
--- swift/common/utils.py	(版本 5356)
+++ swift/common/utils.py	(工作副本)
@@ -283,27 +283,13 @@
 
     return ContainerDetails(bytes_used, object_count, obj_list, dir_list)
 
-def get_container_details(cont_path, memcache=None):
+def get_container_details(cont_path):
     """
     Return object_list, object_count and bytes_used.
     """
-    mkey = ''
-    if memcache:
-        mkey = MEMCACHE_CONTAINER_DETAILS_KEY_PREFIX + cont_path
-        cd = memcache.get(mkey)
-        if cd:
-            if not cd.dir_list:
-                cd = None
-            else:
-                for (path, mtime) in cd.dir_list:
-                    if mtime != do_stat(path).st_mtime:
-                        cd = None
-    else:
-        cd = None
-    if not cd:
-        cd = _get_container_details_from_fs(cont_path)
-        if memcache:
-            memcache.set(mkey, cd)
+    
+    cd = _get_container_details_from_fs(cont_path)
+        
     return cd.obj_list, cd.object_count, cd.bytes_used
 
 
@@ -339,29 +325,15 @@
 
     return AccountDetails(acc_stats.st_mtime, container_count, container_list)
 
-def get_account_details(acc_path, memcache=None):
+def get_account_details(acc_path):
     """
     Return container_list and container_count.
     """
     acc_stats = None
-    mkey = ''
-    if memcache:
-        mkey = MEMCACHE_ACCOUNT_DETAILS_KEY_PREFIX + acc_path
-        ad = memcache.get(mkey)
-        if ad:
-            # FIXME: Do we really need to stat the file? If we are object
-            # only, then we can track the other Swift HTTP APIs that would
-            # modify the account and invalidate the cached entry there. If we
-            # are not object only, are we even called on this path?
-            acc_stats = do_stat(acc_path)
-            if ad.mtime != acc_stats.st_mtime:
-                ad = None
-    else:
-        ad = None
+    ad = None
     if not ad:
         ad = _get_account_details_from_fs(acc_path, acc_stats)
-        if memcache:
-            memcache.set(mkey, ad)
+        
     return ad.container_list, ad.container_count
 
 def _get_etag(path):
@@ -409,11 +381,11 @@
             metadata[key] = value_i
     return metadata
 
-def get_container_metadata(cont_path, memcache=None):
+def get_container_metadata(cont_path):
     objects = []
     object_count = 0
     bytes_used = 0
-    objects, object_count, bytes_used = get_container_details(cont_path, memcache)
+    objects, object_count, bytes_used = get_container_details(cont_path)
     metadata = {X_TYPE: CONTAINER,
                 X_TIMESTAMP: normalize_timestamp(os.path.getctime(cont_path)),
                 X_PUT_TIMESTAMP: normalize_timestamp(os.path.getmtime(cont_path)),
@@ -421,10 +393,10 @@
                 X_BYTES_USED: bytes_used}
     return _add_timestamp(metadata)
 
-def get_account_metadata(acc_path, memcache=None):
+def get_account_metadata(acc_path):
     containers = []
     container_count = 0
-    containers, container_count = get_account_details(acc_path, memcache)
+    containers, container_count = get_account_details(acc_path)
     metadata = {X_TYPE: ACCOUNT,
                 X_TIMESTAMP: normalize_timestamp(os.path.getctime(acc_path)),
                 X_PUT_TIMESTAMP: normalize_timestamp(os.path.getmtime(acc_path)),
@@ -448,10 +420,10 @@
     metadata = get_object_metadata(obj_path)
     return restore_metadata(obj_path, metadata)
 
-def create_container_metadata(cont_path, memcache=None):
-    metadata = get_container_metadata(cont_path, memcache)
+def create_container_metadata(cont_path):
+    metadata = get_container_metadata(cont_path)
     return restore_metadata(cont_path, metadata)
 
-def create_account_metadata(acc_path, memcache=None):
-    metadata = get_account_metadata(acc_path, memcache)
+def create_account_metadata(acc_path):
+    metadata = get_account_metadata(acc_path)
     return restore_metadata(acc_path, metadata)
